apiVersion: v1
kind: ConfigMap
metadata: 
  name: {{ include "config.fullname" . }}-config-cm
  namespace: {{ .Values.global.namespace }}
data:
  ADMIN_PW:  {{ .Values.adminPass }}
  EMAIL: {{ .Values.email }}
  ORG_NAME: {{ .Values.orgName }}
  COUNTRY_CODE: {{ .Values.countryCode }}
  STATE: {{ .Values.state }}
  CITY: {{ .Values.city }}
  LDAP_TYPE: {{ .Values.ldapType }}
  DOMAIN: {{ .Values.global.domain }}
  GLUU_CONFIG_ADAPTER: {{ .Values.global.configAdapterName }}
  GLUU_SECRET_ADAPTER: {{ .Values.global.configSecretAdapter }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "config.fullname" . }}-gen-json-file
data:
  generate.json: |-
    {
      "hostname": {{ .Values.global.domain | quote }},
      "country_code": {{ .Values.countryCode | quote }},
      "state": {{ .Values.state | quote }},
      "city": {{ .Values.city | quote }},
      "admin_pw": {{ .Values.adminPass | quote }},
      "email": {{ .Values.email | quote }},
      "org_name": {{ .Values.orgName | quote }}
    }

---

apiVersion: v1
data:
  tls_generator.py: "from pprint import pprint\nfrom kubernetes import config, client\nimport
    logging\n\n#use the serviceAccount k8s gives to pods\nconfig.load_incluster_config()
    \nv1 = client.CoreV1Api()\n\n#global vars\nname = \"tls-certificate\"\nnamespace
    = \"default\"\n\n# check if gluu secret exists\ndef get_certs():\n    if ( v1.read_namespaced_secret(
    'gluu', 'default' ) ):\n        ssl_cert = v1.read_namespaced_secret( 'gluu',
    'default' ).data['ssl_cert']\n        ssl_key = v1.read_namespaced_secret( \"gluu\",
    \"default\" ).data['ssl_key']\n        \n        print('ssl_cert / {} \\n ssl_key:
    {}'.format(ssl_cert, ssl_key) )\n\n    return ssl_cert, ssl_key\n\n\ndef create_tls(cert,
    key):\n\n    v1 = client.CoreV1Api()\n    try:\n        secret = v1.read_namespaced_secret(name,
    namespace)\n    except client.rest.ApiException as e:\n        if e.status ==
    404:\n            print('secret/{} in ns/{} does not exist. Creating...'.format(\n
    \               name, namespace))\n            metadata = {\n                'name':
    name,\n                'namespace': namespace\n            }\n            data
    = {\n                'tls.crt': cert,\n                'tls.key' : key,\n            }\n
    \           api_version = 'v1'\n            kind = 'Secret'\n            body
    = client.V1Secret(api_version, data , kind, metadata, \n                type='kubernetes.io/tls')\n
    \           api_response = v1.create_namespaced_secret(namespace, body )\n            pprint(api_response)\n
    \       else:\n            logging.exception(e)\n        return False\n    else:\n
    \       print('tls-certificate already exists as /{}'. format(\n            secret\n
    \       ))\n\n        \ndef main():\n    cert, key = get_certs()\n    create_tls(cert,
    key)\n\nif __name__ == \"__main__\":\n    main()"
kind: ConfigMap
metadata:
  name: {{ include "config.fullname" . }}-tls-script

---

apiVersion: v1
data:
  updatelbip.py: |-
    #!/usr/bin/env python
    """
    Update the IP of the load balancer automatically
    """
    import socket
    import sys
    import os
    import logging
    import time

    logger = logging.getLogger("update-lb-ip")
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    fmt = logging.Formatter('%(levelname)s - %(asctime)s - %(message)s')
    ch.setFormatter(fmt)
    logger.addHandler(ch)

    def backup(hosts):
        timenow = time.strftime("%c")
        timestamp = "Backup occured %s \n" % timenow
        with open('/etc/hosts.back', 'a+') as f:
            f.write(timestamp)
            for line in hosts:
                f.write(line)


    def get_hosts(LB_ADDR, DOMAIN):
        ip_list = []
        hosts_list = []
        ais = socket.getaddrinfo(LB_ADDR, 0, 0, 0, 0)
        for result in ais:
            ip_list.append(result[-1][0])
        ip_list = list(set(ip_list))
        for ip in ip_list:
            add_host = ip + " " + DOMAIN
            hosts_list.append(add_host)

        return hosts_list


    def main():
        try:
            while True:
                LB_ADDR = os.environ.get("LB_ADDR", "")
                DOMAIN = os.environ.get("DOMAIN", "demoexample.gluu.org")
                host_file = open('/etc/hosts', 'r').readlines()
                hosts = get_hosts(LB_ADDR, DOMAIN)
                stop = []
                for host in hosts:
                    for i in host_file:
                        if host.replace(" ", "") in i.replace(" ", ""):
                            stop.append("found")
                if len(stop) != len(hosts):
                    backup(host_file)
                    logger.info("Writing new hosts file")
                    with open('/etc/hosts', 'w') as f:
                        for line in host_file:
                            if DOMAIN not in line:
                                f.write(line)
                        for host in hosts:
                            f.write(host)
                            f.write("\n")
                        f.write("\n")
                time.sleep(300)
        except KeyboardInterrupt:
            logger.warn("Canceled by user; exiting ...")


    if __name__ == "__main__":
        main()
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-updatelbip
