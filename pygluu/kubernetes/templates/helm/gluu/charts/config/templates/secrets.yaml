# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "config.fullname" . }}-gen-json-file
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
type: Opaque
stringData:
  generate.json: |-
    {
      "hostname": {{ .Values.global.domain | quote }},
      "country_code": {{ .Values.countryCode | quote }},
      "state": {{ .Values.state | quote }},
      "city": {{ .Values.city | quote }},
      "admin_pw": {{ .Values.adminPass | quote }},
      "ldap_pw": {{ .Values.ldapPass | quote }},
      "redis_pw": {{ .Values.redisPass | quote }},
      "email": {{ .Values.email | quote }},
      "org_name": {{ .Values.orgName | quote }},
      "salt": {{ .Values.salt | quote }}
    }

{{ if eq .Values.global.gluuPersistenceType "sql" }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-sql-pass
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
type: Opaque
data:
  sql_password: {{ .Values.configmap.cnSqldbUserPassword | b64enc }}
{{- end }}

{{ if or ( eq .Values.global.gluuPersistenceType "couchbase" ) ( eq .Values.global.gluuPersistenceType "hybrid" ) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-cb-pass
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
type: Opaque
data:
  couchbase_password: {{ .Values.configmap.gluuCouchbasePass | b64enc }}

---
{{- if not .Values.global.istio.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-cb-crt
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
type: Opaque
data:
  couchbase.crt: {{ .Values.configmap.gluuCouchbaseCrt }}

---
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-superuser-cb-pass
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
type: Opaque
data:
  couchbase_superuser_password: {{ .Values.configmap.gluuCouchbaseSuperUserPass | b64enc }}
{{- end }}
{{ if or (eq .Values.global.configSecretAdapter "aws") (eq .Values.global.configAdapterName "aws") }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-aws-config-creds
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
type: Opaque
stringData:
  aws_shared_credential_file: |-
    [{{ .Values.configmap.cnAwsProfile }}]
    aws_access_key_id = {{ .Values.configmap.cnAwsAccessKeyId }}
    aws_secret_access_key = {{ .Values.configmap.cnAwsSecretAccessKey }}
  aws_config_file: |-
    [{{ .Values.configmap.cnAwsProfile }}]
    region = {{ .Values.configmap.cnAwsDefaultRegion }}
  aws_secrets_replica_regions: |-
    {{ .Values.configmap.cnAwsSecretsReplicaRegions | toJson }}
{{- end }}
{{ if or (eq .Values.global.configSecretAdapter "google") (eq .Values.global.gluuPersistenceType "spanner") }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-google-sa
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
type: Opaque
data:
  google-credentials.json: {{ .Values.configmap.cnGoogleServiceAccount }}
{{- end}}
{{- if or (eq .Values.global.gluuPersistenceType "ldap") (eq .Values.global.gluuPersistenceType "hybrid")  }}
---
# Consider removing secret after moving ldapPass to global. This is only used by the cronJob ldap backup.
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-ldap-cron-pass
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
data:
    password: {{ .Values.ldapPass | b64enc }}
{{- end}}
