# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config-cm
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
data:
  GLUU_SQL_DB_DIALECT: {{ .Values.configmap.cnSqlDbDialect }}
  GLUU_SQL_DB_HOST: {{ .Values.configmap.cnSqlDbHost }}
  GLUU_SQL_DB_PORT: {{ .Values.configmap.cnSqlDbPort | quote }}
  GLUU_SQL_DB_NAME: {{ .Values.configmap.cnSqlDbName }}
  GLUU_SQL_DB_USER: {{ .Values.configmap.cnSqlDbUser }}
  GLUU_SQL_DB_TIMEZONE: {{ .Values.configmap.cnSqlDbTimezone }}
  GLUU_SQL_PASSWORD_FILE: {{ .Values.configmap.cnSqlPasswordFile }}
  {{ if or (eq .Values.global.configAdapterName "google") (eq .Values.global.configSecretAdapter "google") (eq .Values.global.gluuPersistenceType "spanner") }}
  # [google_envs] Envs related to using Google 
  GOOGLE_APPLICATION_CREDENTIALS: {{ .Values.global.cnGoogleApplicationCredentials | quote }}
  GOOGLE_PROJECT_ID: {{ .Values.configmap.cnGoogleProjectId | quote }}
  {{- end }}
  {{ if eq .Values.global.gluuPersistenceType "spanner" }}
  # [google_spanner_envs] Envs related to using Google Cloud Spanner  
  GLUU_GOOGLE_SPANNER_INSTANCE_ID: {{ .Values.configmap.cnGoogleSpannerInstanceId | quote }}
  GLUU_GOOGLE_SPANNER_DATABASE_ID: {{ .Values.configmap.cnGoogleSpannerDatabaseId | quote }}
  SPANNER_EMULATOR_HOST: {{ .Values.configmap.cnGoogleSpannerEmulatorHost | quote }}
  # [google_spanner_envs] END
  {{- end }}
  {{ if or (eq .Values.global.configSecretAdapter "google") (eq .Values.global.configAdapterName "google") }}
  # [google_secret_manager_envs] Envs related to using Google Secret Manager to store config and secret layer  
  GLUU_GOOGLE_SECRET_VERSION_ID: {{ .Values.configmap.cnSecretGoogleSecretVersionId | quote }}
  GLUU_GOOGLE_SECRET_NAME_PREFIX: {{ .Values.configmap.cnSecretGoogleSecretNamePrefix | quote }}
  # [google_secret_manager_envs] END
  {{- end }}
  {{ if or (eq .Values.global.configSecretAdapter "aws") (eq .Values.global.configAdapterName "aws") }}
  # [aws_envs] Envs related to using AWS
  {{- if .Values.configmap.cnAwsSecretsEndpointUrl }}
  GLUU_AWS_SECRETS_ENDPOINT_URL: {{ .Values.configmap.cnAwsSecretsEndpointUrl }}
  {{- end }}
  GLUU_AWS_SECRETS_PREFIX: {{ .Values.configmap.cnAwsSecretsNamePrefix }}
  GLUU_AWS_SECRETS_REPLICA_FILE: {{ .Values.global.cnAwsSecretsReplicaRegionsFile }}
  AWS_DEFAULT_REGION: {{ .Values.configmap.cnAwsDefaultRegion }}
  AWS_SHARED_CREDENTIALS_FILE: {{ .Values.global.cnAwsSharedCredentialsFile }}
  AWS_CONFIG_FILE: {{ .Values.global.cnAwsConfigFile }}
  #AWS_PROFILE
  # [aws_envs] END
  {{- end }}
  GLUU_CONFIG_ADAPTER: {{ .Values.global.configAdapterName }}
  GLUU_SECRET_ADAPTER: {{ .Values.global.configSecretAdapter }}
  GLUU_CONFIG_KUBERNETES_NAMESPACE: {{ .Release.Namespace | quote }}
  GLUU_SECRET_KUBERNETES_NAMESPACE: {{ .Release.Namespace | quote }}
  GLUU_CONTAINER_METADATA: {{ .Values.configmap.containerMetadataName | quote }}
  GLUU_MAX_RAM_PERCENTAGE: {{ .Values.configmap.gluuMaxRamPercent | quote }}
  GLUU_CACHE_TYPE: {{ .Values.configmap.gluuCacheType | quote }}
  GLUU_DOCUMENT_STORE_TYPE: {{ .Values.configmap.gluuDocumentStoreType | quote }}
  GLUU_JACKRABBIT_SYNC_INTERVAL: {{ .Values.configmap.gluuJackrabbitSyncInterval | quote }}
  GLUU_JACKRABBIT_URL: {{ .Values.configmap.gluuJackrabbitUrl | quote }}
  DOMAIN: {{ .Values.global.domain | quote }}
  GLUU_OXAUTH_BACKEND: {{ .Values.configmap.gluuOxauthBackend | quote }}
  GLUU_OXAUTH_APP_LOGGERS: {{ .Values.global.oxauth.appLoggers
  | toJson
  | replace "authLogTarget" "oxauth_log_target"
  | replace "authLogLevel" "oxauth_log_level"
  | replace "httpLogTarget" "http_log_target"
  | replace "httpLogLevel" "http_log_level"
  | replace "persistenceLogTarget" "persistence_log_target"
  | replace "persistenceLogLevel" "persistence_log_level"
  | replace "persistenceDurationLogTarget" "persistence_duration_log_target"
  | replace "persistenceDurationLogLevel" "persistence_duration_log_level"
  | replace "ldapStatsLogTarget" "ldap_stats_log_target"
  | replace "ldapStatsLogLevel" "ldap_stats_log_level"
  | replace "scriptLogTarget" "script_log_target"
  | replace "scriptLogLevel" "script_log_level"
  | replace "auditStatsLogTarget" "audit_log_target"
  | replace "auditStatsLogLevel" "audit_log_level"
  | replace "cleanerLogTarget" "cleaner_log_target"
  | replace "cleanerLogLevel" "cleaner_log_level"
  | replace "enableStdoutLogPrefix" "enable_stdout_log_prefix"
  | squote
  }}
  GLUU_OXD_SERVER_URL: {{ .Values.configmap.gluuOxdServerUrl | quote }}
  GLUU_OXD_BIND_IP_ADDRESSES: {{ .Values.configmap.gluuOxdBindIpAddresses | quote }}
  GLUU_OXD_APP_LOGGERS: {{ index .Values "global" "oxd-server" "appLoggers"
  | toJson
  | replace "oxdServerLogTarget" "oxd_log_target"
  | replace "oxdServerLogLevel" "oxd_log_level"
  | squote
  }}
  {{- if and (eq .Values.global.isDomainRegistered "false") (or (eq .Values.global.storageClass.provisioner "kubernetes.io/aws-ebs") (eq .Values.global.storageClass.provisioner "openebs.io/local")) }}
  LB_ADDR: {{ .Values.configmap.lbAddr }}
  {{- end }}
  GLUU_PERSISTENCE_TYPE: {{ .Values.global.gluuPersistenceType }}
  {{- if or (eq .Values.global.gluuPersistenceType "ldap") (eq .Values.global.gluuPersistenceType "hybrid")  }}
  # used only if GLUU_PERSISTENCE_TYPE is ldap or hybrid
  GLUU_LDAP_URL: {{ .Values.configmap.gluuLdapUrl | quote }}
  {{- else if or (eq .Values.global.gluuPersistenceType "couchbase") (eq .Values.global.gluuPersistenceType "hybrid") }}
  #  used only if GLUU_PERSISTENCE_TYPE is couchbase or hybrid
  GLUU_COUCHBASE_BUCKET_PREFIX: {{ .Values.configmap.gluuCouchbaseBucketPrefix }}
  GLUU_COUCHBASE_URL: {{ .Values.configmap.gluuCouchbaseUrl }}
  GLUU_COUCHBASE_USER: {{ .Values.configmap.gluuCouchbaseUser }}
  GLUU_COUCHBASE_INDEX_NUM_REPLICA: {{ .Values.configmap.gluuCouchbaseIndexNumReplica | quote }}
  GLUU_COUCHBASE_CERT_FILE: {{ .Values.configmap.gluuCouchbaseCertFile | quote }}
  GLUU_COUCHBASE_PASSWORD_FILE: {{ .Values.configmap.gluuCouchbasePassFile | quote }}
  GLUU_COUCHBASE_SUPERUSER: {{ .Values.configmap.gluuCouchbaseSuperUser }}
  GLUU_COUCHBASE_SUPERUSER_PASSWORD_FILE: {{ .Values.configmap.gluuCouchbaseSuperUserPassFile | quote }}
  {{- end }}
  GLUU_KEY_ROTATION_FORCE: "false"
  GLUU_KEY_ROTATION_CHECK: "3600"
  GLUU_KEY_ROTATION_INTERVAL: "48"
  GLUU_CONTAINER_MAIN_NAME: {{ .Release.Name }}-oxauth
  {{- if eq .Values.global.isDomainRegistered "false" }}
  GLUU_SSL_CERT_FROM_SECRETS: "true"
  {{- else }}
  GLUU_SSL_CERT_FROM_SECRETS: "false"
  {{- end }}
  # options: default/user/site/cache/statistic used only if GLUU_PERSISTENCE_TYPE is hybrid or hybrid
  {{- if or (eq .Values.global.gluuPersistenceType "hybrid") (eq .Values.global.gluuPersistenceType "ldap") }}
  GLUU_PERSISTENCE_LDAP_MAPPING: {{ .Values.configmap.gluuPersistenceLdapMapping | quote }}
  {{- end }}
  GLUU_OXTRUST_CONFIG_GENERATION: {{ .Values.configmap.gluuOxtrustConfigGeneration | quote }}
  # must the same as the opendj service name
  GLUU_CERT_ALT_NAME: {{ .Values.global.ldapServiceName }} #{{ template "gluu.fullname" . }}-service
  GLUU_SYNC_CASA_MANIFESTS: {{ .Values.configmap.gluuSyncCasaManifests | quote }}
  GLUU_OXTRUST_BACKEND: {{ .Values.configmap.gluuOxtrustBackend | quote }}
  GLUU_OXTRUST_APP_LOGGERS: {{ .Values.global.oxtrust.appLoggers
  | toJson
  | replace "oxtrustLogTarget" "oxtrust_log_target"
  | replace "oxtrustLogLevel" "oxtrust_log_level"
  | replace "httpLogTarget" "http_log_target"
  | replace "httpLogLevel" "http_log_level"
  | replace "persistenceLogTarget" "persistence_log_target"
  | replace "persistenceLogLevel" "persistence_log_level"
  | replace "persistenceDurationLogTarget" "persistence_duration_log_target"
  | replace "persistenceDurationLogLevel" "persistence_duration_log_level"
  | replace "ldapStatsLogTarget" "ldap_stats_log_target"
  | replace "ldapStatsLogLevel" "ldap_stats_log_level"
  | replace "scriptLogTarget" "script_log_target"
  | replace "scriptLogLevel" "script_log_level"
  | replace "auditStatsLogTarget" "audit_log_target"
  | replace "auditStatsLogLevel" "audit_log_level"
  | replace "cleanerLogTarget" "cleaner_log_target"
  | replace "cleanerLogLevel" "cleaner_log_level"
  | replace "velocityLogLevel" "velocity_log_level"
  | replace "velocityLogTarget" "velocity_log_target"
  | replace "cacheRefreshLogLevel" "cache_refresh_log_level"
  | replace "cacheRefreshLogTarget" "cache_refresh_log_target"
  | replace "cacheRefreshPythonLogLevel" "cache_refresh_python_log_level"
  | replace "cacheRefreshPythonLogTarget" "cache_refresh_python_log_target"
  | replace "apachehcLogLevel" "apachehc_log_level"
  | replace "apachehcLogTarget" "apachehc_log_target"
  | replace "enableStdoutLogPrefix" "enable_stdout_log_prefix"
  | squote
  }}
  GLUU_FIDO2_APP_LOGGERS: {{ .Values.global.fido2.appLoggers
  | toJson
  | replace "fido2LogTarget" "fido2_log_target"
  | replace "fido2LogLevel" "fido2_log_level"
  | replace "persistenceLogTarget" "persistence_log_target"
  | replace "persistenceLogLevel" "persistence_log_level"
  | replace "enableStdoutLogPrefix" "enable_stdout_log_prefix"
  | squote
  }}
  GLUU_SYNC_SHIB_MANIFESTS: {{ .Values.configmap.gluuSyncShibManifests | quote }}
  GLUU_OXTRUST_API_ENABLED: {{ .Values.configmap.gluuOxtrustApiEnabled | quote }}
  GLUU_OXTRUST_API_TEST_MODE: {{ .Values.configmap.gluuOxtrustApiTestMode | quote }}
  {{ if .Values.global.jackrabbit.enabled }}
  GLUU_JACKRABBIT_APP_LOGGERS: {{ .Values.global.jackrabbit.appLoggers
  | toJson
  | replace "jackrabbitLogTarget" "jackrabbit_log_target"
  | replace "jackrabbitLogLevel" "jackrabbit_log_level"
  | squote
  }}
  {{- end }}
  {{ if eq .Values.global.gluuJackrabbitCluster "true" }}
  GLUU_JACKRABBIT_ADMIN_ID: {{ .Values.configmap.gluuJackrabbitAdminId | quote }}
  GLUU_JACKRABBIT_ADMIN_PASSWORD_FILE: {{ .Values.configmap.gluuJackrabbitAdminPassFile | quote }}
  GLUU_JACKRABBIT_CLUSTER: {{ .Values.global.gluuJackrabbitCluster | quote }}
  GLUU_JACKRABBIT_POSTGRES_USER: {{ .Values.configmap.gluuJackrabbitPostgresUser | quote }}
  GLUU_JACKRABBIT_POSTGRES_PASSWORD_FILE: {{ .Values.configmap.gluuJackrabbitPostgresPasswordFile | quote }}
  GLUU_JACKRABBIT_POSTGRES_HOST: {{ .Values.configmap.gluuJackrabbitPostgresHost | quote }}
  GLUU_JACKRABBIT_POSTGRES_PORT: {{ .Values.configmap.gluuJackrabbitPostgresPort | quote }}
  GLUU_JACKRABBIT_POSTGRES_DATABASE: {{ .Values.configmap.gluuJackrabbitPostgresDatabaseName | quote }}
  {{- end }}
  # Auto enable installation of some services
  GLUU_CASA_ENABLED: {{ .Values.configmap.gluuCasaEnabled | quote }}
  GLUU_PASSPORT_ENABLED: {{ .Values.configmap.gluuPassportEnabled | quote }}
  GLUU_SCIM_ENABLED: {{ .Values.global.scim.enabled | quote }}
  GLUU_SCIM_PROTECTION_MODE: {{ .Values.configmap.gluuScimProtectionMode | quote }}
  GLUU_SCIM_APP_LOGGERS: {{ .Values.global.scim.appLoggers
  | toJson
  | replace "scimLogTarget" "scim_log_target"
  | replace "scimLogLevel" "scim_log_level"
  | replace "persistenceLogTarget" "persistence_log_target"
  | replace "persistenceLogLevel" "persistence_log_level"
  | replace "persistenceDurationLogTarget" "persistence_duration_log_target"
  | replace "persistenceDurationLogLevel" "persistence_duration_log_level"
  | replace "scriptLogTarget" "script_log_target"
  | replace "scriptLogLevel" "script_log_level"
  | replace "enableStdoutLogPrefix" "enable_stdout_log_prefix"
  | squote
  }}
  {{- if .Values.global.oxshibboleth.enabled }}
  GLUU_SAML_ENABLED: {{ .Values.configmap.gluuSamlEnabled | quote }}
  GLUU_OXSHIBBOLETH_APP_LOGGERS: {{ .Values.global.oxshibboleth.appLoggers
  | toJson
  | replace "auditStatsLogTarget" "audit_log_target"
  | replace "auditStatsLogLevel" "audit_log_level"
  | replace "consentAuditLogTarget" "consent_audit_log_target"
  | replace "consentAuditLogLevel" "consent_audit_log_level"
  | replace "idpLogTarget" "idp_log_target"
  | replace "idpLogLevel" "idp_log_level"
  | replace "scriptLogTarget" "script_log_target"
  | replace "scriptLogLevel" "script_log_level"
  | replace "enableStdoutLogPrefix" "enable_stdout_log_prefix"
  | squote
  }}
  {{- end }}
  GLUU_OXD_APPLICATION_CERT_CN: {{ .Values.configmap.gluuOxdApplicationCertCn | quote }}
  GLUU_OXD_ADMIN_CERT_CN: {{ .Values.configmap.gluuOxdAdminCertCn | quote }}
  {{ if eq .Values.configmap.gluuCacheType "REDIS" }}
  GLUU_REDIS_URL: {{ .Values.configmap.gluuRedisUrl | quote }}
  GLUU_REDIS_TYPE: {{ .Values.configmap.gluuRedisType | quote }}
  GLUU_REDIS_USE_SSL: {{ .Values.configmap.gluuRedisUseSsl | quote }}
  GLUU_REDIS_SSL_TRUSTSTORE: {{ .Values.configmap.gluuRedisSslTruststore | quote }}
  GLUU_REDIS_SENTINEL_GROUP: {{ .Values.configmap.gluuRedisSentinelGroup | quote }}
  {{- end }}
  {{- if .Values.global.istio.enabled }}
  GLUU_COUCHBASE_TRUSTSTORE_ENABLE: "false"
  GLUU_LDAP_USE_SSL: "false"
  {{- end }}
  # BELOW TEMP ENV. TO BE REMOVED IN 4.4
  GLUU_PASSPORT_FAILURE_REDIRECT_URL: {{ .Values.configmap.gluuPassportFailureRedirectUrl | quote }}

---

apiVersion: v1
data:
  tls_generator.py: |-
    from kubernetes import config, client
    import logging
    import base64

    from pygluu.containerlib import get_manager

    log_format = '%(asctime)s - %(name)8s - %(levelname)5s - %(message)s'
    logging.basicConfig(format=log_format, level=logging.INFO)
    logger = logging.getLogger("tls-generator")

    # use the serviceAccount k8s gives to pods
    config.load_incluster_config()
    core_cli = client.CoreV1Api()

    def patch_or_create_namespaced_secret(name, literal, value_of_literal, namespace="default",
                                          secret_type="Opaque", second_literal=None, value_of_second_literal=None,
                                          data=None):
        """Patch secret and if not exist create
        :param name:
        :param literal:
        :param value_of_literal:
        :param namespace:
        :param secret_type:
        :param second_literal:
        :param value_of_second_literal:
        :param data:
        :return:
        """
        # Instantiate the Secret object
        body = client.V1Secret()
        metadata = client.V1ObjectMeta(name=name)
        body.data = data
        if not data:
            body.data = {literal: value_of_literal}
        body.metadata = metadata
        body.type = secret_type
        if second_literal:
            body.data = {literal: value_of_literal, second_literal: value_of_second_literal}
        try:
            core_cli.patch_namespaced_secret(name, namespace, body)
            logger.info('Secret  {} in namespace {} has been patched'.format(name, namespace))
            return
        except client.rest.ApiException as e:
            if e.status == 404 or not e.status:
                try:
                    core_cli.create_namespaced_secret(namespace=namespace, body=body)
                    logger.info('Created secret {} of type {} in namespace {}'.format(name, secret_type, namespace))
                    return True
                except client.rest.ApiException as e:
                    logger.exception(e)
                    return False
            logger.exception(e)
            return False

    # check if gluu secret exists
    def get_certs():
        """Get cert and key from secret layer.

        :return: ssl cert and key (if any)
        """
        def b64encode(value):
            return base64.b64encode(value.encode()).decode()

        manager = get_manager()

        # returns empty string if not found
        ssl_cert = manager.secret.get("ssl_cert")
        if ssl_cert:
            ssl_cert = b64encode(ssl_cert)

        # returns empty string if not found
        ssl_key = manager.secret.get("ssl_key")
        if ssl_key:
            ssl_key = b64encode(ssl_key)
        return ssl_cert, ssl_key


    def main():
        namespace = {{.Release.Namespace | quote}}
        secret_name = "gluu"
        cert, key = get_certs()
        # global vars
        name = "tls-certificate"

        # if istio is enabled
        {{- if.Values.global.istio.ingress}}
        namespace = {{.Values.global.istio.namespace | quote}}
        {{- end}}

        if cert and key:
            patch_or_create_namespaced_secret(name=name,
                                              namespace=namespace,
                                              literal="tls.crt",
                                              value_of_literal=cert,
                                              secret_type="kubernetes.io/tls",
                                              second_literal="tls.key",
                                              value_of_second_literal=key)
        else:
            logger.error("No certificate or key was found in secrets."
                          "This can happen when the ssl certificate for the domain is able to be pulled."
                          "In that scenario the ssl_cert will be pulled from the domain provided")

    if __name__ == "__main__":
        main()

kind: ConfigMap
metadata:
  name: {{ include "config.fullname" . }}-tls-script
  namespace: {{ .Release.Namespace }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}

---

apiVersion: v1
data:
  updatelbip.py: |-
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    # Update the IP of the load balancer automatically

    """
     License terms and conditions for Gluu Cloud Native Edition:
     https://www.apache.org/licenses/LICENSE-2.0
    """

    import socket
    import os
    import logging
    import time

    logger = logging.getLogger("update-lb-ip")
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    fmt = logging.Formatter('%(levelname)s - %(asctime)s - %(message)s')
    ch.setFormatter(fmt)
    logger.addHandler(ch)


    def backup(hosts):
        timenow = time.strftime("%c")
        timestamp = "Backup occurred %s \n" % timenow
        logger.info("Backing up hosts file to /etc/hosts.back ...")
        with open('/etc/hosts.back', 'a+') as f:
            f.write(timestamp)
            for line in hosts:
                f.write(line)


    def get_hosts(lb_addr, domain):
        ip_list = []
        hosts_list = []
        ais = socket.getaddrinfo(lb_addr, 0, 0, 0, 0)
        for result in ais:
            ip_list.append(result[-1][0])
        ip_list = list(set(ip_list))
        for ip in ip_list:
            add_host = ip + " " + domain
            hosts_list.append(add_host)

        return hosts_list


    def main():
        try:
            while True:
                lb_addr = os.environ.get("LB_ADDR", "")
                domain = os.environ.get("DOMAIN", "demoexample.gluu.org")
                host_file = open('/etc/hosts', 'r').readlines()
                hosts = get_hosts(lb_addr, domain)
                stop = []
                for host in hosts:
                    for i in host_file:
                        if host.replace(" ", "") in i.replace(" ", ""):
                            stop.append("found")
                if len(stop) != len(hosts):
                    backup(host_file)
                    logger.info("Writing new hosts file")
                    with open('/etc/hosts', 'w') as f:
                        for line in host_file:
                            if domain not in line:
                                f.write(line)
                        for host in hosts:
                            f.write(host)
                            f.write("\n")
                        f.write("\n")
                time.sleep(300)
        except KeyboardInterrupt:
            logger.warning("Canceled by user; exiting ...")


    if __name__ == "__main__":
        main()

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-updatelbip
  namespace: {{ .Release.Namespace }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
