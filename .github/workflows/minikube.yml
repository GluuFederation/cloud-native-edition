name: minikube
# This builds, packages and tests pygluu-kubernetes
on:
  #push:
  #  paths:
  #    - "pygluu/**"
  #    - "tests/**"
  #    - "setup.py"
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]
        gluu-version: ['"5.0.0_dev"']
        persistence-backends: ['"ldap"']
    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo python3 -m pip install --upgrade pip
        sudo pip3 install setuptools --upgrade
        sudo pip3 install pyOpenSSL --upgrade
        sudo pip3 install requests --upgrade

    - name: Lint with flake8
      run: |
        sudo pip3 install flake8
        # stop the build if there are Python syntax errors or undefined names
        sudo flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        sudo flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build Zipapp
      run: |
        sudo apt-get update
        sudo apt-get install build-essential
        sudo pip3 install shiv
        mkdir /home/runner/work/test
        cp -r ./* /home/runner/work/test/
        cd /home/runner/work/test/
        sudo make zipapp

    - name: Install Minikube
      id: minikube
      uses: medyagh/setup-minikube@master

    - name: Install Istio
      run: |
          curl -sL https://istio.io/downloadIstioctl | sh -
          export PATH=$PATH:$HOME/.istioctl/bin
          istioctl operator init

    - name: Test 1 settings(LDAP)
      id: test1_settings
      run: |
        sudo chmod -R 777 /etc/kubernetes
        minikube addons enable ingress
        ip=$(minikube ip)
        kubectl describe nodes
        cat <<EOF > /home/runner/work/test/settings.json
        {
          "CN_ACCEPT_LICENSE": "Y",
          "CN_TEST_ENVIRONMENT": "Y",
          "CN_VERSION": ${{ matrix.gluu-version }},
          "CN_UPGRADE_TARGET_VERSION": "",
          "CN_NGINX_INGRESS_NAMESPACE": "ingress-nginx",
          "CN_HELM_RELEASE_NAME": "gluu",
          "CN_NGINX_INGRESS_RELEASE_NAME": "ningress",
          "CN_POSTGRES_NAMESPACE": "postgres",
          "CN_POSTGRES_REPLICAS": 3,
          "CN_POSTGRES_URL": "postgres.postgres.svc.cluster.local",
          "CN_USE_ISTIO": "Y",
          "CN_USE_ISTIO_INGRESS": "N",
          "CN_ISTIO_SYSTEM_NAMESPACE": "istio-system",
          "CN_NODES_IPS": [
            "$ip"
          ],
          "CN_NODES_ZONES": [],
          "CN_NODES_NAMES": [],
          "CN_NODE_SSH_KEY": "",
          "CN_HOST_EXT_IP": "$ip",
          "CN_VERIFY_EXT_IP": "",
          "installer-settings.aws.lbType": "",
          "CN_USE_ARN": "",
          "CN_ARN_AWS_IAM": "",
          "CN_LB_ADD": "",
          "CN_REDIS_URL": "",
          "CN_REDIS_TYPE": "",
          "CN_REDIS_PW": "",
          "CN_REDIS_USE_SSL": "false",
          "CN_DEPLOYMENT_ARCH": "minikube",
          "CN_PERSISTENCE_BACKEND": ${{ matrix.persistence-backends }},
          "CN_INSTALL_JACKRABBIT": "Y",
          "CN_JACKRABBIT_STORAGE_SIZE": "4Gi",
          "CN_JACKRABBIT_URL": "http://jackrabbit:8080",
          "CN_JACKRABBIT_ADMIN_ID": "admin",
          "CN_JACKRABBIT_ADMIN_PASSWORD": "admin",
          "CN_JACKRABBIT_CLUSTER": "Y",
          "CN_JACKRABBIT_PG_USER": "jackrabbit",
          "CN_JACKRABBIT_PG_PASSWORD": "jackrabbit",
          "CN_JACKRABBIT_DATABASE": "jackrabbit",
          "CN_INSTALL_COUCHBASE": "Y",
          "CN_COUCHBASE_NAMESPACE": "cbns",
          "CN_COUCHBASE_VOLUME_TYPE": "io1",
          "CN_COUCHBASE_CLUSTER_NAME": "cbgluu",
          "CN_COUCHBASE_URL": "cbgluu.cbns.svc.cluster.local",
          "CN_COUCHBASE_INDEX_NUM_REPLICA": "0",
          "CN_COUCHBASE_USER": "gluu",
          "CN_COUCHBASE_SUPERUSER": "admin",
          "CN_COUCHBASE_PASSWORD": "nTB5#|",
          "CN_COUCHBASE_SUPERUSER_PASSWORD": "nTB5#2",
          "CN_COUCHBASE_CRT": "",
          "CN_COUCHBASE_CN": "Couchbase CN",
          "CN_COUCHBASE_SUBJECT_ALT_NAME": "",
          "CN_COUCHBASE_CLUSTER_FILE_OVERRIDE": "N",
          "CN_COUCHBASE_USE_LOW_RESOURCES": "Y",
          "CN_COUCHBASE_DATA_NODES": "",
          "CN_COUCHBASE_QUERY_NODES": "",
          "CN_COUCHBASE_INDEX_NODES": "",
          "CN_COUCHBASE_SEARCH_EVENTING_ANALYTICS_NODES": "",
          "CN_COUCHBASE_GENERAL_STORAGE": "",
          "CN_COUCHBASE_DATA_STORAGE": "",
          "CN_COUCHBASE_INDEX_STORAGE": "",
          "CN_COUCHBASE_QUERY_STORAGE": "",
          "CN_COUCHBASE_ANALYTICS_STORAGE": "",
          "COUCHBASE_BACKUP_SCHEDULE": "*/30 * * * *",
          "COUCHBASE_BACKUP_RESTORE_POINTS": 1,
          "CN_LDAP_BACKUP_SCHEDULE": "*/30 * * * *",
          "CN_NUMBER_OF_EXPECTED_USERS": "",
          "CN_EXPECTED_TRANSACTIONS_PER_SEC": "",
          "CN_USING_CODE_FLOW": "",
          "CN_USING_SCIM_FLOW": "",
          "CN_USING_RESOURCE_OWNER_PASSWORD_CRED_GRANT_FLOW": "",
          "CN_DEPLOY_MULTI_CLUSTER": "N",
          "CN_HYBRID_LDAP_HELD_DATA": "",
          "CN_LDAP_JACKRABBIT_VOLUME": "",
          "CN_APP_VOLUME_TYPE": 2,
          "CN_LDAP_STATIC_VOLUME_ID": "",
          "CN_LDAP_STATIC_DISK_URI": "",
          "CN_CACHE_TYPE": "NATIVE_PERSISTENCE",
          "CN_NAMESPACE": "gluu",
          "CN_FQDN": "demoexample.gluu.org",
          "CN_COUNTRY_CODE": "US",
          "CN_STATE": "TX",
          "CN_EMAIL": "support@gluu.org",
          "CN_CITY": "Austin",
          "CN_ORG_NAME": "Gluu",
          "CN_GMAIL_ACCOUNT": "",
          "CN_GOOGLE_NODE_HOME_DIR": "",
          "CN_IS_CN_FQDN_REGISTERED": "N",
          "CN_LDAP_PASSWORD": "nTB5#|",
          "CN_ADMIN_PASSWORD": "@4n,Js",
          "CLIENT_API_PW": "n8H0NKuGTXsn",
          "CN_CLIENT_API_APPLICATION_KEYSTORE_CN": "client-api",
          "CN_CLIENT_API_ADMIN_KEYSTORE_CN": "client-api",
          "CLIENT_API_STORAGE": "h2",
          "LDAP_STORAGE_SIZE": "4Gi",
          "AUTH_SERVER_REPLICAS": 1,
          "OXTRUST_REPLICAS": 1,
          "LDAP_REPLICAS": 1,
          "OXSHIBBOLETH_REPLICAS": 1,
          "OXPASSPORT_REPLICAS": 1,
          "CLIENT_API_REPLICAS": 1,
          "CASA_REPLICAS": 1,
          "FIDO2_REPLICAS": 1,
          "SCIM_REPLICAS": 1,
          "AUTH_SERVER_KEYS_LIFE": 48,
          "ENABLE_CONFIG_API": "Y",
          "ENABLE_OXTRUST_API": "N",
          "ENABLE_FIDO2": "Y",
          "ENABLE_SCIM": "Y",
          "ENABLE_OXTRUST_TEST_MODE": "N",
          "ENABLE_CACHE_REFRESH": "N",
          "ENABLE_CLIENT_API": "Y",
          "ENABLE_OXPASSPORT": "Y",
          "ENABLE_OXSHIBBOLETH": "Y",
          "ENABLE_CASA": "Y",
          "ENABLE_AUTH_SERVER_KEY_ROTATE": "Y",
          "ENABLE_OXTRUST_API_BOOLEAN": "true",
          "ENABLE_OXTRUST_TEST_MODE_BOOLEAN": "false",
          "ENABLE_OXPASSPORT_BOOLEAN": "true",
          "ENABLE_CASA_BOOLEAN": "true",
          "ENABLE_SAML_BOOLEAN": "true",
          "EDIT_IMAGE_NAMES_TAGS": "N",
          "CONFIRM_PARAMS": "Y"
        }
        EOF

    - name: Install Couchbase
      if: ${{ matrix.persistence-backends == '"couchbase"' }}
      run: |
          cd /home/runner/work/test/
          wget ${{ secrets.cbpackage }}
          sudo ./pygluu-kubernetes.pyz install-couchbase
          COUCHBASE_IP=$(kubectl get po cbgluu-0000 -n cbns --template={{.status.podIP}})
          cat settings.json | sed 's/"CN_INSTALL_COUCHBASE": "Y"/"CN_INSTALL_COUCHBASE": "N"/g' |  sed -s "s@cbgluu.cbns.svc.cluster.local@$COUCHBASE_IP@g" > tmpfile.py && mv tmpfile.py settings.json



    - name: Test Pygluu kubernetes
      id: test_kubernetes
      run: |
          cd /home/runner/work/test/
          sudo ./pygluu-kubernetes.pyz install
          cat /home/runner/work/test/settings.json
          kubectl get po -n gluu
          kubectl get po -n cbns

