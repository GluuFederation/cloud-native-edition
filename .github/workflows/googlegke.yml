name: googlegke
# This builds, packages and tests pygluu-kubernetes
on: [workflow_dispatch]
jobs:
  build:

    runs-on: ubuntu-18.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.0.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install unzip -y
        sudo python3 -m pip install --upgrade pip
        sudo pip3 install setuptools --upgrade
        sudo pip3 install pyOpenSSL --upgrade
        sudo pip3 install requests --upgrade

    - name: Lint with flake8
      run: |
        sudo pip3 install flake8
        # stop the build if there are Python syntax errors or undefined names
        sudo flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        sudo flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install pygluu
      run: |
        sudo apt-get update
        sudo apt-get install build-essential
        sudo pip3 install shiv
        mkdir /home/runner/work/test/
        cp -r ./* /home/runner/work/test/
        cd /home/runner/work/test/
        sudo make zipapp

    - name: Install Google GKE dependencies
      run: |
          cd /home/runner/work/test/
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get install apt-transport-https ca-certificates gnupg
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install google-cloud-sdk
          sudo apt-get update && sudo apt-get install -y apt-transport-https
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl
          wget "${{ secrets.google_service_account }}" -O sa.json

    - name: Install Helm
      run: |
          cd /home/runner/work/test/
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          sudo helm version

    - name: Create GKE cluster
      run: |
        cd /home/runner/work/test/
        RAND_STR=$(openssl rand -hex 4)
        GKE_NAME=automation-test-"$RAND_STR"
        echo "$GKE_NAME" > gke_cluster_name
        cat gke_cluster_name
        sudo gcloud auth activate-service-account --key-file sa.json
        sudo gcloud config set project ${{ secrets.google_project }}
        sudo gcloud container clusters create $GKE_NAME --num-nodes 2 --machine-type e2-highcpu-8 --zone ${{ secrets.google_region }}-a
        sudo gcloud container clusters get-credentials $GKE_NAME --zone ${{ secrets.google_region }}-a

    #- name: Install Istio
    #  run: |
    #      curl -sL https://istio.io/downloadIstioctl | sh -
    #      export PATH=$PATH:$HOME/.istioctl/bin
    #      istioctl operator init
        
    - name: Create settings.json
      id: test1_settings
      run: |
        cat <<EOF > /home/runner/work/test/settings.json
        {
          "ACCEPT_GLUU_LICENSE": "Y",
          "TEST_ENVIRONMENT": "Y",
          "GLUU_VERSION": "4.4",
          "GLUU_UPGRADE_TARGET_VERSION": "",
          "NGINX_INGRESS_NAMESPACE": "ingress-nginx",
          "GLUU_HELM_RELEASE_NAME": "helm",
          "NGINX_INGRESS_RELEASE_NAME": "ningress",
          "INSTALL_POSTGRES": "N",
          "POSTGRES_NAMESPACE": "postgres",
          "POSTGRES_URL": "postgres.postgres.svc.cluster.local",
          "USE_ISTIO": "N",
          "USE_ISTIO_INGRESS": "N",
          "MIGRATION_ENABLED": "N",
          "ISTIO_SYSTEM_NAMESPACE": "istio-system",
          "NODES_IPS": [],
          "NODES_ZONES": [],
          "NODES_NAMES": [],
          "NODE_SSH_KEY": "~/.ssh/id_rsa",
          "HOST_EXT_IP": "",
          "VERIFY_EXT_IP": "",
          "AWS_LB_TYPE": "clb",
          "USE_ARN": "N",
          "ARN_AWS_IAM": "",
          "LB_ADD": "",
          "REDIS_URL": "",
          "REDIS_TYPE": "",
          "REDIS_PW": "",
          "REDIS_USE_SSL": "false",
          "DEPLOYMENT_ARCH": "gke",
          "PERSISTENCE_BACKEND": "ldap",
          "INSTALL_JACKRABBIT": "Y",
          "JACKRABBIT_STORAGE_SIZE": "4Gi",
          "JACKRABBIT_URL": "http://jackrabbit:8080",
          "JACKRABBIT_ADMIN_ID": "admin",
          "JACKRABBIT_ADMIN_PASSWORD": "admin",
          "JACKRABBIT_CLUSTER": "Y",
          "JACKRABBIT_PG_USER": "jackrabbit",
          "JACKRABBIT_PG_PASSWORD": "jackrabbit",
          "JACKRABBIT_DATABASE": "jackrabbit",
          "INSTALL_COUCHBASE": "Y",
          "COUCHBASE_NAMESPACE": "cbns",
          "COUCHBASE_VOLUME_TYPE": "pd-standard",
          "COUCHBASE_CLUSTER_NAME": "cbgluu",
          "COUCHBASE_URL": "cbgluu.cbns.svc.cluster.local",
          "COUCHBASE_INDEX_NUM_REPLICA": "0",s
          "COUCHBASE_USER": "gluu",
          "COUCHBASE_SUPERUSER": "admin",
          "COUCHBASE_BUCKET_PREFIX": "test",
          "COUCHBASE_PASSWORD": "nTB5#|",
          "COUCHBASE_SUPERUSER_PASSWORD": "nTB5#2",
          "COUCHBASE_CRT": "",
          "COUCHBASE_CN": "Couchbase CN",
          "COUCHBASE_SUBJECT_ALT_NAME": "",
          "COUCHBASE_CLUSTER_FILE_OVERRIDE": "N",
          "COUCHBASE_USE_LOW_RESOURCES": "Y",
          "COUCHBASE_DATA_NODES": "",
          "COUCHBASE_QUERY_NODES": "",
          "COUCHBASE_INDEX_NODES": "",
          "COUCHBASE_SEARCH_EVENTING_ANALYTICS_NODES": "",
          "COUCHBASE_GENERAL_STORAGE": "",
          "COUCHBASE_DATA_STORAGE": "",
          "COUCHBASE_INDEX_STORAGE": "",
          "COUCHBASE_QUERY_STORAGE": "",
          "COUCHBASE_ANALYTICS_STORAGE": "",
          "COUCHBASE_INCR_BACKUP_SCHEDULE": "*/30 * * * *",
          "COUCHBASE_FULL_BACKUP_SCHEDULE": "*/30 * * * *",
          "COUCHBASE_BACKUP_RETENTION_TIME": "24h",
          "COUCHBASE_BACKUP_STORAGE_SIZE": "5Gi",
          "LDAP_BACKUP_SCHEDULE": "*/30 * * * *",
          "NUMBER_OF_EXPECTED_USERS": "",
          "EXPECTED_TRANSACTIONS_PER_SEC": "",
          "USING_CODE_FLOW": "",
          "USING_SCIM_FLOW": "",
          "USING_RESOURCE_OWNER_PASSWORD_CRED_GRANT_FLOW": "",
          "DEPLOY_MULTI_CLUSTER": "N",
          "HYBRID_LDAP_HELD_DATA": "",
          "LDAP_JACKRABBIT_VOLUME": "pd-standard",
          "APP_VOLUME_TYPE": 11,
          "LDAP_STATIC_VOLUME_ID": "",
          "LDAP_STATIC_DISK_URI": "",
          "GLUU_CACHE_TYPE": "NATIVE_PERSISTENCE",
          "GLUU_NAMESPACE": "gluu",
          "GLUU_FQDN": "demoexample.gluu.org",
          "COUNTRY_CODE": "US",
          "STATE": "TX",
          "EMAIL": "support@gluu.org",
          "CITY": "Austin",
          "ORG_NAME": "Gluu",
          "GMAIL_ACCOUNT": "${{ secrets.google_email }}",
          "GOOGLE_NODE_HOME_DIR": "",
          "IS_GLUU_FQDN_REGISTERED": "N",
          "LDAP_PW": "nTB5#|",
          "ADMIN_PW": "@4n,Js",
          "OXD_SERVER_PW": "n8H0NKuGTXsn",
          "OXD_APPLICATION_KEYSTORE_CN": "oxd-server",
          "OXD_ADMIN_KEYSTORE_CN": "oxd-server",
          "OXD_SERVER_STORAGE": "h2",
          "LDAP_STORAGE_SIZE": "4Gi",
          "OXAUTH_REPLICAS": 1,
          "OXTRUST_REPLICAS": 1,
          "FIDO2_REPLICAS": 1,
          "SCIM_REPLICAS": 1,
          "LDAP_REPLICAS": 1,
          "OXSHIBBOLETH_REPLICAS": 1,
          "OXPASSPORT_REPLICAS": 1,
          "OXD_SERVER_REPLICAS": 1,
          "CASA_REPLICAS": 1,
          "ENABLE_OXTRUST_API": "N",
          "ENABLE_OXTRUST_TEST_MODE": "N",
          "ENABLE_CACHE_REFRESH": "N",
          "ENABLE_OXD": "Y",
          "ENABLE_FIDO2": "Y",
          "ENABLE_SCIM": "Y",
          "ENABLE_OXPASSPORT": "Y",
          "ENABLE_OXSHIBBOLETH": "Y",
          "ENABLE_CASA": "Y",
          "OXAUTH_KEYS_LIFE": 48,
          "ENABLE_OXAUTH_KEY_ROTATE": "Y",
          "ENABLE_OXTRUST_API_BOOLEAN": "true",
          "ENABLE_OXTRUST_TEST_MODE_BOOLEAN": "false",
          "ENABLE_OXPASSPORT_BOOLEAN": "true",
          "ENABLE_CASA_BOOLEAN": "true",
          "ENABLE_SAML_BOOLEAN": "true",
          "EDIT_IMAGE_NAMES_TAGS": "N",
          "CONFIRM_PARAMS": "Y",
          "GLUU_LDAP_MULTI_CLUSTER": "N"
        }
        EOF

    - name: Test Pygluu ldap helm
      id: test_kubernetes_ldap_helm
      run: |
          cd /home/runner/work/test/
          sudo ./pygluu-kubernetes.pyz helm-install
          sleep 30
          sudo kubectl wait -n gluu --for=condition=ready pod --timeout=900s -l statefulset.kubernetes.io/pod-name=helm-opendj-0 || sudo kubectl logs -l app=opendj -c opendj -n gluu || echo "Not Found"
          sudo kubectl -n gluu wait --for=condition=available --timeout=600s deploy/helm-oxauth || sudo kubectl logs -l app=oxauth -c oxauth -n gluu || echo "Not Found"
          sudo kubectl wait -n gluu --for=condition=ready pod --timeout=300s -l statefulset.kubernetes.io/pod-name=helm-oxtrust-0 || sudo kubectl logs -l app=oxtrust -c oxtrust -n gluu || echo "Not Found"
          sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/helm-oxpassport || sudo kubectl logs -l app=oxpassport -c oxpassport -n gluu || echo "Not Found"
          sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/helm-casa || sudo kubectl logs -l app=casa -c casa -n gluu || echo "Not Found"
          sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/helm-oxd-server || sudo kubectl logs -l app=oxd-server -c oxd-server -n gluu || echo "Not Found"
          sudo kubectl wait -n gluu --for=condition=ready pod --timeout=300s -l statefulset.kubernetes.io/pod-name=helm-oxshibboleth-0 || sudo kubectl logs -l app=oxshiboleth -c oxshiboleth -n gluu || echo "Not Found"
          sudo kubectl get po -n gluu
          sudo ./pygluu-kubernetes.pyz helm-uninstall
          sudo kubectl delete -f gluu_gke_yamls/nginx/. || echo "Resources not found"
          sudo helm delete helm-ldap-backup -n gluu || echo "Resources not found"
          sleep 20

    - name: Test Pygluu couchbase helm
      id: test_kubernetes_couchbase_helm
      run: |
        cd /home/runner/work/test/
        cat settings.json | sed 's/"INSTALL_COUCHBASE": "N"/"INSTALL_COUCHBASE": "Y"/g' > tmpfile.py && mv tmpfile.py settings.json
        sudo ./pygluu-kubernetes.pyz install-couchbase
        cat settings.json | sed 's/"INSTALL_COUCHBASE": "Y"/"INSTALL_COUCHBASE": "N"/g' | sed -s "s@cbgluu.cbns.svc.cluster.local@$COUCHBASE_IP@g" > tmpfile.py && mv tmpfile.py settings.json
        cat settings.json | sed 's/"COUCHBASE_URL": "couchbase"/"COUCHBASE_URL": "cbgluu.cbns.svc.cluster.local"/g' > tmpfile.py && mv tmpfile.py settings.json
        cat settings.json | sed 's/"COUCHBASE_URL": ""/"COUCHBASE_URL": "cbgluu.cbns.svc.cluster.local"/g' > tmpfile.py && mv tmpfile.py settings.json
        sudo ./pygluu-kubernetes.pyz helm-install
        sudo kubectl delete -f couchbase-backup.yaml || echo "Resources not found"
        sleep 30
        sudo kubectl -n gluu wait --for=condition=available --timeout=600s deploy/helm-oxauth || sudo kubectl logs -l app=oxauth -c oxauth -n gluu || echo "Not Found"
        sudo kubectl wait -n gluu --for=condition=ready pod --timeout=300s -l statefulset.kubernetes.io/pod-name=helm-oxtrust-0 || sudo kubectl logs -l app=oxtrust -c oxtrust -n gluu || echo "Not Found"
        sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/helm-oxpassport || sudo kubectl logs -l app=oxpassport -c oxpassport -n gluu || echo "Not Found"
        sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/helm-casa || sudo kubectl logs -l app=casa -c casa -n gluu || echo "Not Found"
        sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/helm-oxd-server || sudo kubectl logs -l app=oxd-server -c oxd-server -n gluu || echo "Not Found"
        sudo kubectl wait -n gluu --for=condition=ready pod --timeout=300s -l statefulset.kubernetes.io/pod-name=helm-oxshibboleth-0 || sudo kubectl logs -l app=oxshiboleth -c oxshiboleth -n gluu || echo "Not Found"
        sudo kubectl get po -n cbns
        sudo kubectl get po -n gluu
        sudo ./pygluu-kubernetes.pyz uninstall-couchbase
        sudo ./pygluu-kubernetes.pyz helm-uninstall
        sudo kubectl delete -f gluu_gke_yamls/nginx/. || echo "Resources not found"
        sleep 20
        sudo kubectl get po -n cbns
        sudo kubectl get po -n gluu


    - name: Uninstall and destroy cluster
      if: always()
      run: |
          cd /home/runner/work/test/
          sudo ./pygluu-kubernetes.pyz uninstall-couchbase || echo "pygluu failed"
          sudo ./pygluu-kubernetes.pyz helm-uninstall || echo "pygluu failed"
          GKE_NAME=$(cat gke_cluster_name || echo "noname")
          sudo gcloud container clusters delete $GKE_NAME --zone ${{ secrets.google_region }}-a --quiet